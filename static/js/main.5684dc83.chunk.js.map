{"version":3,"sources":["components/card.js","data.js","components/navBar.js","components/gameBoard.js","App.js","serviceWorker.js","index.js"],"names":["Cards","props","react_default","a","createElement","alt","onClick","id","src","image","gameImages","url","click","navBar","className","score","gameBoard","state","images","clickedCards","shuffleCard","console","log","Object","toConsumableArray","_this","includes","setState","push","i","j","x","tempArray","length","Math","floor","random","_this2","this","components_navBar","map","components_card","key","React","Component","App","components_gameBoard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5684dc83.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './card.css';\r\n\r\nfunction Cards(props){\r\n        return(\r\n            <img alt=\"\" onClick={() => props.onClick(props.id)} src ={props.image} id={props.id}/>\r\n               \r\n        )\r\n    //onClick={}\r\n}\r\n\r\nexport default Cards;","\r\nvar gameImages = [\r\n    {\r\n        'id': 1,\r\n        'url': '/images/img_one.jpg',\r\n        'click': false\r\n    },\r\n    {\r\n        'id': 2,\r\n        'url': \"/images/img_two.jpg\",\r\n        'click': false\r\n    },\r\n    {\r\n        'id': 3,\r\n        'url': '/images/img_thr.jpg',\r\n        'click': false\r\n    },\r\n    {\r\n        'id': 4,\r\n        'url': '/images/img_four.jpg',\r\n        'click': false\r\n    },\r\n    {\r\n        'id': 5,\r\n        'url': '/images/img_five.jpg',\r\n        'click': false\r\n    },\r\n    {\r\n        'id': 6,\r\n        'url': '/images/img_six.jpg',\r\n        'click': false\r\n    },\r\n    {\r\n        'id': 7,\r\n        'url': '/images/img_seven.png',\r\n        'click': false\r\n    },\r\n    {\r\n        'id': 8,\r\n        'url': '/images/img_eig.jpeg',\r\n        'click': false\r\n    },\r\n    {\r\n        'id': 9,\r\n        'url': '/images/img_nine.png',\r\n        'click': false,\r\n\r\n    },\r\n    {\r\n        'id': 10,\r\n        'url': '/images/img_ten.jpg',\r\n        'click': false\r\n    },\r\n    {\r\n        'id': 11,\r\n        'url': '/images/img_elev.jpg',\r\n        'click': false\r\n    },\r\n    {\r\n        'id': 12,\r\n        'url': '/images/img_twel.jpg',\r\n        'click': false\r\n    },\r\n]\r\n\r\nexport default gameImages;","import React from \"react\";\r\n\r\nfunction navBar(props) {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n            <p className=\"navbar-brand\" >Clicker Game</p>\r\n\r\n            <p className=\"navbar-brand\">Start clicking image to Start!</p>\r\n\r\n            <p className=\"navbar-brand\" >Score:<span>{props.score}</span></p>\r\n\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default navBar;","import React from \"react\";\r\nimport Card from './card';\r\nimport images from '../data';\r\nimport Navbar from './navBar';\r\nimport './card.css';\r\n\r\nclass gameBoard extends React.Component {\r\n    state = {\r\n        images: images,\r\n        clickedCards: [],\r\n        score: 0\r\n    };\r\n\r\n    score = () => {\r\n        if(images === true){\r\n\r\n        }\r\n    }\r\n\r\n    //shuffle cards after images are clicked\r\n    shuffleCard = (id) =>{\r\n        console.log(\"I got clicked\");\r\n        console.log(id);\r\n        var clickedCards = [...this.state.clickedCards];    //spread operator\r\n        if(!clickedCards.includes(id)){\r\n            clickedCards.push(id);\r\n            var tempArray = this.state.images;\r\n        var i, j, x;\r\n        for ( i = tempArray.length-1;i > 0; i--) {\r\n            j = Math.floor(Math.random() * (i + 1));\r\n            x = tempArray[i];\r\n            tempArray[i] = tempArray[j];\r\n            tempArray[j] = x;\r\n        };\r\n        this.setState({images: tempArray,clickedCards:clickedCards,score:this.state.score+1});\r\n        console.log(\"you won\");\r\n        \r\n        }else{\r\n            this.setState({score:this.state.score});\r\n            console.log(\"You lose\");\r\n        }\r\n        console.log(this.state.clickedCards);\r\n       \r\n    }\r\n\r\n    render() {\r\n        console.log(this.state.images);\r\n\r\n        return (\r\n        <div>\r\n            <Navbar score={this.state.score}>\r\n                \r\n            </Navbar>\r\n\r\n            <div className=\"gameDesc\">\r\n                <div className=\"jumbotron text-center\">\r\n                    <h1>Clicky Game!</h1>,\r\n            <p> Click on an image to earn points, but don't click on any more than once! </p>\r\n                </div>\r\n                <div className=\"container\">\r\n                    <div className=\"wrapper\">\r\n                        {this.state.images.map(image => <Card key={image.id} onClick={this.shuffleCard} image={image.url} id={image.id}/>)}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default gameBoard;","import React from 'react';\n//import Navbar from './components/navBar';\nimport Gameboard from './components/gameBoard';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      {/* <Navbar/> */}\n      <Gameboard/>\n      \n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}